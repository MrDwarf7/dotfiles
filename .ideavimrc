" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

syntax on

" Necessities
map mapleader=" "
map <Space>=<leader>
let mapleader=" "





" set timeoutlen=500
set notimeout


inoremap jj <ESC>
map <C-c> <Esc>
map <ESC> :noh<CR>
nnoremap <Space> :nop<CR>



""" Common settings -------------------------
set number relativenumber
set clipboard+=unnamed
set clipboard+=ideaput


set visualbell
set noerrorbells
set scrolloff=8

" Search settings
set incsearch
set ignorecase
set smartcase
set hlsearch
set showmatch

set ttimeout=80
set showmode


""" Idea specific settings ------------------
set ideajoin
" set ideastatusicon=gray



""" Plugins ------------------ --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'easymotion/vim-easymotion'
Plug 'preservim/nerdtree'
Plug 'tommcdo/vim-exchange'
Plug 'vim-scripts/ReplaceWithRegister'

""" Plugin activation / Specifics------------------
set which-key
set sneak
set surround
set quickscope
set ideamarks

let g:highlightedyank_highlight_duration = "80"
" Trigger a highlight in the appropriate direction when pressing these keys:
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" Trigger a highlight only when pressing f and F.
let g:qs_highlight_on_keys = ['f', 'F']

let g:WhichKey_SortOrder = by_description
let g:WhichKey_FontSize	= 15


map <leader>q <Plug>(easymotion-f)
map <leader>Q <Plug>(easymotion-s)


""" ------------------------- KEYMAPS ------------------------- """

""" Misc / Out of the way binds -------------------------
map \e :e %HOMEPATH%\.ideavimrc<CR>
map \r :action IdeaVim.ReloadVimRc.reload<CR><ESC>



nnoremap <C-A> gg<S-v>G
let g:WhichKeyDesc_commentray_prefix = "gc"
let g:WhichKeyDesc_commentray_action = "gcc"

""" Handler specific binds -------------------------
sethandler <C-j> a:vim
sethandler <C-k> a:vim
sethandler <C-h> a:vim
sethandler <C-l> a:vim

"sethandler <C-n> a:vim
"sethandler <C-p> a:vim


""" ------------------------- GENERAL ------------------------- """
""" Formatting -------------------------
let g:WhichKeyDesc_Formatting = "=="
let g:WhichKeyDesc_Formatting = "--"
let g:WhichKeyDesc_Formatting = "=="
let g:WhichKeyDesc_Formatting = "=="
nnoremap == :action ReformatCode <CR>
vnoremap == :action ReformatCode <CR>
nnoremap -- :action OptimizeImports <CR>
vnoremap -- :action OptimizeImports <CR>
vnoremap < <gv
vnoremap > >gv

nnoremap gcc :action CommentByLineComment <CR>
vnoremap gcc :action CommentByLineComment <CR>

nnoremap zc :action CollapseRegion<CR>
vnoremap zc :action CollapseRegion<CR>
nnoremap zo :action ExpandRegion<CR>
vnoremap zo :action ExpandRegion<CR>


nnoremap zf :action CollapseRegion<CR>
nnoremap zf :action ExpandRegion<CR>

vnoremap <M-j> :m'>+<CR>gv=gv
vnoremap <M-k> :m-2<CR>gv=gv


""" Navigation specific binds -------------------------
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
let g:WhichKeyDesc_NerdTree = "<Space>e NERD Tree"
nnoremap <Space>e :NERDTree <CR>
nnoremap <Space>e :NERDTreeToggle<CR>


"nnoremap <C-j> :action Up




""" Text Navigation specific binds -------------------------
nnoremap <S-Tab> :action PreviousTab<CR>
nnoremap <Tab> :action NextTab<CR>
map <S-h> ^
map <S-l> $
" noremap <Space>ma :acton SurroundWith<CR>

""" Find Binds -------------------------
let g:WhichKeyDesc_find = "<Space>f Find"
nmap <Space>ff :action GotoFile<CR>
vmap <Space>ff :action GotoFile<CR>
nnoremap <Space>fp :action FindInPath<CR>
nnoremap <Space>fr :action RecentFiles <CR>
nnoremap <Space>fl :action RecentLocations<CR>
let g:WhichKeyDesc_Toggle_Nerd = "<Space>te NERD Tree Focus"
nnoremap <Space>fe :NERDTreeFocus<CR>

""" Goto Binds -------------------------
"let g:WhichKeyDesc_Goto = "<Space>g Goto"
nnoremap gd :action GotoDeclaration <CR>
nnoremap gi :action GotoImplementation <CR>
nnoremap gT :action GotoTest <CR>
nnoremap gh :action Back <CR>
nnoremap gl :action Forward <CR>
nnoremap gj :action MethodDown <CR>
nnoremap gk :action MethodUp <CR>
nnoremap gs :action GotoSuperMethod <CR>
nnoremap g, :action JumpToLastChange <CR>
nnoremap g. :action JumpToNextChange <CR>


nnoremap gc :action GotoClass <CR>
vnoremap gc :action GotoClass <CR>
nnoremap gf :action GotoFile <CR>
vnoremap gf :action GotoFile <CR>

nnoremap <Space>gq :action QuickList.Git <CR>



let g:WhichKeyDesc_New = "<Space>n New"
nnoremap <Space>ns :action NewScratchFile <CR>
nnoremap <Space>ne :action NewElementSamePlace <CR>
" vnoremap <Space>re :action Replace<CR>
" nnoremap <Space>re :action Replace<CR>
" vnoremap / :action Find<CR>
" nnoremap / :action Find<CR>





""" Mark Binds -------------------------
"Map common used global vim letter bookmarks to Intellij number bookmarks
let g:WhichKeyDesc_Mark = "<Space>m Marks"
nnoremap mm :action ToggleBookmark0<CR>
nnoremap mn :action ToggleBookmark1<CR>
nnoremap mh :action ToggleBookmark2<CR>
nnoremap mj :action ToggleBookmark3<CR>
nnoremap mk :action ToggleBookmark4<CR>
nnoremap ml :action ToggleBookmark5<CR>
nnoremap m1 :action ToggleBookmark6<CR>
nnoremap m2 :action ToggleBookmark7<CR>
nnoremap m3 :action ToggleBookmark8<CR>
nnoremap m4 :action ToggleBookmark9<CR>

nnoremap `m :action GotoBookmark0<CR>
nnoremap `n :action GotoBookmark1<CR>
nnoremap `h :action GotoBookmark2<CR>
nnoremap `j :action GotoBookmark3<CR>
nnoremap `k :action GotoBookmark4<CR>
nnoremap `l :action GotoBookmark5<CR>
nnoremap `1 :action GotoBookmark6<CR>
nnoremap `2 :action GotoBookmark7<CR>
nnoremap `3 :action GotoBookmark8<CR>
nnoremap `4 :action GotoBookmark9<CR>

"Use Intellij letter bookmarks comes with an annoying popup window.
nnoremap <Space>m :action ShowBookmarks<CR>
nnoremap <Space>` :action ToggleBookmarkWithMnemonic<CR>




""" Buffer Binds -------------------------
let g:WhichKeyDesc_Buffer = "<Space>b Buffers"
nnoremap <TAB> :action PreviousTab<CR>
nnoremap <S-TAB> :action NextTab<CR>
nmap <Space>bn :action NextTab<CR>
nmap <Space>bp :action PreviousTab<CR>


let g:WhichKeyDesc_Close = "<Space>x Close Buffer"
nmap <Space>x :action CloseEditor<CR>


let g:WhichKeyDesc_Split = "<Space>v Split Vertically"
nnoremap <Space>v :action SplitVertically<CR>

let g:WhichKeyDesc_HSplit = "<Space>s Split Horizontally"
nnoremap <Space>s :action SplitHorizontally<CR>


nnoremap <C-w>u :action Unsplit<CR>
nnoremap <C-w>t :action MoveEditorToOppositeTabGroup<CR>
nnoremap <Space>bh :action HideAllWindows <CR>

""" Toggles/UI specific binds -------------------------
let g:WhichKeyDesc_Toggle = "<Space>t Toggles"
nnoremap <Space>tt :action ActivateTerminalToolWindow<CR>
nnoremap <Space>td :action ActivateDebugToolWindow<CR>
" nnoremap <C-/>: :action ActivateTerminalToolWindow<CR>


"" Git / Source control specific binds -------------------------
let g:WhichKeyDesc_Git = "<Space>g Git"
nnoremap <Space>gg :action Vcs.Operations.Popup<CR>
nnoremap <Space>gs :action ActivateCommitToolWindow<CR>
nnoremap <Space>gc :action ActivateCommitToolWindow<CR>
nnoremap <Space>gS :action Git.Commit.Stage<CR>
"nnoremap <Space>gs :action NavBarVcsGroup<CR>
nnoremap <Space>gp :action Vcs.Push<CR>
"nnoremap <Space>gS :action Vcs.Stage<CR>


"" LSP specific binds -------------------------
let g:WhichKeyDesc_LSP = "<Space>l LSP"
nnoremap <Space>la :action ShowIntentionActions<CR>
nnoremap <Space>lh :action ShowErrorDescription<CR>
nnoremap <Space>lr :action ReformatCode<CR>
nnoremap <leader>lp :action ActivateProblemsViewToolWindow<CR>


""" Debug specific binds -------------------------
let g:WhichKeyDesc_Debug = "<Space>d Debug"
" noremap <Space>d
nnoremap <Space>db :action ToggleLineBreakpoint<CR>
nnoremap <Space>dr :action Debug<CR>
nnoremap <Space>dR :action Rerun<CR>
nnoremap <Space>ds :action Stop<CR>
nnoremap <Space>dc :action Resume<CR>
"nnoremap <Space>ge :action Generate<CR>

let g:WhichKeyDesc_Run = "<Space>r Run Current"
nnoremap <Space>r :action RunClass<CR>


" map <Space>dc :action Resume<CR>
nnoremap <Space>do :action StepOver<CR>
nnoremap <Space>di :action StepInto<CR>
nnoremap <Space>dO :action StepOut<CR>
nnoremap <Space>d; :action RunToCursor<CR>
nnoremap <Space>d' :action ViewBreakpoints<CR>
nnoremap <Space>de :action EvaluateExpression<CR>
nnoremap <Space>d" :action DebugViewBreakpoints<CR>
nnoremap <Space>de :action DebugEvaluateExpression<CR>

"noremap <Space>dw :action DebugWindow<CR>
"noremap<Space>dt :action DebugToolWindow<CR>
"noremap<Space>dh :action DebugFirst<CR>
"noremap<Space>dl :action DebugLast<CR>
"noremap<Space>dj :action DebugNext<CR>
"noremap<Space>dk :action DebugPrevious<CR>
"noremap<Space>dn :action DebugStepOver<CR>
"noremap<Space>di :action DebugStepInto<CR>
"noremap<Space>dO :action DebugStepOut<CR>
"noremap<Space>dc :action DebugContinue<CR>
"noremap<Space>ds :action DebugStop<CR>
" nnoremap <Space>dR :action DebugRerun<CR>



""" Crap set by Pycharm originally Binds -------------------------
"" Map <Space>d to start debug
"map <Space>d <Action>(Debug)
"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)
"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)