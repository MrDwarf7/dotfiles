# This is a preferences file for the bacon tool
# More info at https://github.com/Canop/bacon

# Uncomment and change the value (true/false) to
# specify whether bacon should start in summary mode
#
summary = false

# Uncomment and change the value (true/false) to
# specify whether bacon should start with lines wrapped
#
# wrap = false

# In "reverse" mode, the focus is at the bottom, item
# order is reversed, and the status bar is on top
#
reverse = false

# Exporting "locations" lets you use them in an external
# tool, for example as a list of jump locations in an IDE.
#
# See https://dystroy.org/bacon/config/#export-locations
#
# Set 'enabled' to true to have bacon always export locations
# This is equivalent to always adding -e to bacon commands
# but can still be cancelled on specific launches with -E
[export]
enabled = false
path = ".bacon-locations"
line_format = "{kind} {path}:{line}:{column} {message}"

# Uncomment and change the key-bindings you want to define
# (some of those ones are the defaults and are just here
#  for illustration)
[keybindings]
esc = "back"
g = "scroll-to-top"
shift-g = "scroll-to-bottom"
k = "scroll-lines(-1)"
j = "scroll-lines(1)"
ctrl-u = "scroll-pages(-1)"
ctrl-d = "scroll-pages(1)"
ctrl-c = "quit"
ctrl-q = "quit"
q = "quit"
shift-r = "rerun"
c = "job:clippy"
C = "job:clippy-all"
t = "job:test"
T = "job:test-all"
r = "job:run"

w = "job:watch-quiet"
W = "job:watch"

b = "job:build"


[jobs.check]
command = ["cargo", "check", "--color", "always"]
need_stdout = false

[jobs.check-all]
command = ["cargo", "check", "--all-targets", "--color", "always"]
need_stdout = false

[jobs.clippy]
command = ["cargo", "clippy", "--all-targets", "--color", "always"]
need_stdout = false

[jobs.clippy-all]
command = [
    "cargo",
    "clippy",
    "--all-targets",
    "--color",
    "always",
    "--",
    "-W",
    "clippy::pedantic",
]
need_stdout = false

[jobs.check-win]
command = [
    "cargo",
    "check",
    "--target",
    "x86_64-pc-windows-gnu",
    "--color",
    "always",
]
need_stdout = false

# This job lets you run
# - all tests: bacon test
# - a specific test: bacon test -- config::test_default_files
# - the tests of a package: bacon test -- -- -p config
[jobs.test]
command = [
    "cargo",
    "test",
    "--color",
    "always",
    "--",
    "--color",
    "always",  # see https://github.com/Canop/bacon/issues/124
]
need_stdout = true

[jobs.test-all]
command = [
    "cargo",
    "test",
    "--all-targets",
    "--color",
    "always",
    "--",
    "--color",
    "always",
]
need_stdout = true


[jobs.doc]
command = ["cargo", "doc", "--color", "always", "--no-deps"]
need_stdout = false

# If the doc compiles, then it opens in your browser and bacon switches
# to the previous job
[jobs.doc-open]
command = ["cargo", "doc", "--color", "always", "--no-deps", "--open"]
need_stdout = false
on_success = "back"                                                    # so that we don't open the browser at each change


[jobs.build]
command = ["cargo", "build", "--color", "always"]
need_stdout = false

[jobs.build-all]
command = ["cargo", "build", "--all-targets", "--color", "always"]
need_stdout = false

# You can run your application and have the result displayed in bacon,
# *if* it makes sense for this crate.
# Don't forget the `--color always` part or the errors won't be
# properly parsed.
# If your program never stops (eg a server), you may set `background`
# to false to have the cargo run output immediately displayed instead
# of waiting for program's end.
[jobs.run]
command = [
    "cargo",
    "run",
    "--color",
    "always",
    # put launch parameters for your program behind a `--` separator
]
need_stdout = true
allow_warnings = true
background = true

[jobs.watch]
command = ["cargo", "watch", "-c", "-w", "src/", "-x", "run"]


[jobs.watch-quiet]
command = ["cargo", "watch", "-c", "-q", "-w", "src/", "-x", "run -q"]


# This parameterized job runs the example of your choice, as soon
# as the code compiles.
# Call it as
#    bacon ex -- my-example
[jobs.ex]
command = ["cargo", "run", "--color", "always", "--example"]
need_stdout = true
allow_warnings = true
