return {}

---- Ctrl binds must be handled via vscode-neovim
-- -- Handles saving via Ctrl + s in normal, visual and insert mode
-- map("n", "<C-s>", ":wa<CR>", silent_opts),
--
-- map("v", "<C-s>", function()
-- 	vim.api.nvim_buf_call(vim.api.nvim_get_current_buf(), function()
-- 		vim.cmd("wa")
-- 	end)
-- end, silent_opts, { desc = "save" }),
--
-- map("i", "<C-s>", function()
-- 	vim.cmd("stopinsert")
-- 	local cur_pos = vim.api.nvim_win_get_cursor(0)
-- 	vim.api.nvim_buf_call(vim.api.nvim_get_current_buf(), function()
-- 		vim.cmd("wa")
-- 	end)
-- 	-- pcall because if the cursor is outside the original buffer length it will error
-- 	pcall(vim.api.nvim_win_set_cursor, 0, cur_pos)
-- end, silent_opts, { desc = "save" }),
-- map("n", "<C-h>", ":vertical resize +2<CR>", silent_opts),
-- map("n", "<C-l>", ":vertical resize -2<CR>", silent_opts),
--

------ Leader key maps need to be done via whichkey plugin, not lua
-- map("n", "<Leader>ye", function()
-- 	require("util.clear_string_encoder")(vim.api.nvim_get_current_buf())
-- end, { desc = "Clear Encoding" })
-- map("n", "<Leader>ym", "<cmd>messages<CR>", { desc = "Messages" }),

-- map("n", "<Leader>tn", "<cmd>tabnext<CR>", silent_opts, { desc = "Next Tab" }),
-- map("n", "<Leader>tp", "<cmd>tabprevious<CR>", silent_opts, { desc = "Previous Tab" }),
-- map("n", "<Leader>to", "<cmd>tabnew<CR>", silent_opts, { desc = "New Tab" }),
-- map("n", "<Leader>tc", "<cmd>tabclose<CR>", silent_opts, { desc = "Close Tab" }),
-- map("n", "<Leader>tx", "<cmd>tabclose<CR>", silent_opts, { desc = "Close Tab" }),
--
-- map("n", "<Leader>t]", "<cmd>tabnext<CR>", silent_opts, { desc = "Next Tab" }),
-- map("n", "<Leader>t[", "<cmd>tabprevious<CR>", silent_opts, { desc = "Previous Tab" }),
--
-- map("n", "<Leader>pl", ":Lazy<CR>", silent_opts, { desc = "[l]azy" }),
-- map("n", "<Leader>pm", ":Mason<CR>", silent_opts, { desc = "[m]ason" }),
--
-- map("n", "<Leader>bN", "<cmd>enew<cr>", { desc = "New File" }),
--
-- map("n", "<Leader>bn", ":bnext<CR>", silent_opts, { desc = "[n]ext" }),
-- map("n", "<Leader>bp", ":bprev<CR>", silent_opts, { desc = "[p]revious" }),
--
-- map("n", "<Leader>b]", ":bnext<CR>", silent_opts, { desc = "[n]ext" }),
-- map("n", "<Leader>b[", ":bprev<CR>", silent_opts, { desc = "[p]revious" }),
--
-- map("n", "<Leader>bc", ":bdelete<CR>", silent_opts, { desc = "[X]close" }),
-- map("n", "<Leader>x", ":bdelete<CR>", silent_opts, { desc = "[X]close" }),
--
-- map("n", "<Leader>?", ":vsplit<CR>:terminal<CR>A", silent_opts, { desc = "Inbuilt Term" }) -- Temp for the time being until lazygit // fugitive or something

-- map("n", "<Leader>gt", ":Octo ", silent_opts, { desc = "Oc[t]o" })

-- map("n", "<Leader>t'", ":Telescope<CR>", silent_opts, { desc = "Generic Telescope call" }),
-- map("n", '<Leader>"', ":Telescope neoclip<CR>", silent_opts, { desc = "Clipboard/Registers" }),
--
-- map("n", "<Leader>ld", vim.diagnostic.open_float, { desc = "Line Diagnostics" }),
--
-- map("n", "<Leader>ty", function()
-- 	---@diagnostic disable-next-line: undefined-field
-- 	if vim.b.ts_highlight then
-- 		vim.treesitter.stop()
-- 	else
-- 		vim.treesitter.start()
-- 	end
-- end, { desc = "Toggle Treesitter Highlight" }),
--
--
-- map("n", "<Leader>ti", function()
-- 	-- if vim.lsp.inlay_hint.is_enabled(vim.lsp.inlay_hint) then
-- 	vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled(vim.lsp.inlay_hint))
-- 	vim.cmd("redraw!")
-- 	-- end
-- end, { expr = true, desc = "Toggle Inlay Hints" }),
-- vim.lsp.inlay_hint.enable()
--
--
--
-------------- Previous mappings
--
--
-- vim.g.mapleader = " "
-- vim.g.maplocalleader = " "

-- return {
-- 	vim.keymap.set("n", "<Esc>", ":nohl<CR>", silent_opts),
-- 	vim.keymap.set("v", "<Esc>", "<Esc>:nohl<CR>", silent_opts),
-- 	-- vim.keymap.set("i", "jj", "<Esc>", silent_opts)
-- 	vim.keymap.set("v", "p", '"_dP', silent_opts),
--
-- 	vim.keymap.set("v", "<C-j>", ":m '>+1<CR>gv=gv", silent_opts), -- Shifting lines down / move
-- 	vim.keymap.set("v", "<C-k>", ":m '<-2<CR>gv=gv", silent_opts), -- Shifting lines up / move
--
-- 	vim.keymap.set("v", "<", "<gv", silent_opts),
-- 	vim.keymap.set("v", ">", ">gv", silent_opts),
--
-- 	-- https://github.com/mhinz/vim-galore#saner-behavior-of-n-and-n
-- 	vim.keymap.set("n", "n", "'Nn'[v:searchforward].'zv'", { expr = true, desc = "Next Search Result" }),
-- 	vim.keymap.set("x", "n", "'Nn'[v:searchforward]", { expr = true, desc = "Next Search Result" }),
-- 	vim.keymap.set("o", "n", "'Nn'[v:searchforward]", { expr = true, desc = "Next Search Result" }),
-- 	vim.keymap.set("n", "N", "'nN'[v:searchforward].'zv'", { expr = true, desc = "Prev Search Result" }),
-- 	vim.keymap.set("x", "N", "'nN'[v:searchforward]", { expr = true, desc = "Prev Search Result" }),
-- 	vim.keymap.set("o", "N", "'nN'[v:searchforward]", { expr = true, desc = "Prev Search Result" }),
--
-- 	vim.keymap.set("n", "H", "^", silent_opts), -- Shift + h (Or just H) to jump to start of line
-- 	vim.keymap.set("n", "L", "$", silent_opts), -- Shift + l (Or just L) to jump to end of line
--
-- 	vim.keymap.set("v", "H", "^", silent_opts), -- Shift + h (Or just H) to jump to start of line
-- 	vim.keymap.set("v", "L", "$", silent_opts), -- Shift + l (Or just L) to jump to end of line
--
-- 	vim.keymap.set("n", "y<S-h>", "y^", silent_opts), -- Same as above for yanking
-- 	vim.keymap.set("n", "y<S-l>", "y$", silent_opts), -- Same as above for yanking
--
-- 	vim.keymap.set("n", "d<S-h>", "d^", silent_opts), -- Same as above for yanking
-- 	vim.keymap.set("n", "d<S-l>", "d$", silent_opts), -- Same as above for yanking
--
-- 	vim.keymap.set("n", "dd", function() -- Empty/blank lines go into blackhole register
-- 		if #vim.api.nvim_get_current_line() == 0 then
-- 			return '"_dd'
-- 		else
-- 			return "dd"
-- 		end
-- 	end, { expr = true }),
--
-- 	vim.keymap.set("n", "<Left>", ":vertical resize +2<CR>", silent_opts),
-- 	vim.keymap.set("n", "<Right>", ":vertical resize -2<CR>", silent_opts),
--
-- 	vim.keymap.set("n", "<C-h>", ":vertical resize +2<CR>", silent_opts),
-- 	vim.keymap.set("n", "<C-l>", ":vertical resize -2<CR>", silent_opts),
-- 	vim.keymap.set("n", "<Down>", ":resize -2<CR>", silent_opts),
-- 	vim.keymap.set("n", "<Up>", ":resize +2<CR>", silent_opts),
--
-- 	vim.keymap.set("n", "<C-w>e", "<C-w>=", silent_opts, { desc = "[e]qualize" }), -- ctrl + w + = : easier to hit to equalize the width of buffers
-- 	vim.keymap.set("n", "<C-w>X", "<cmd>only<CR>", silent_opts, { desc = "buffers - CLOSE all except" }),
--
-- 	-- mappings(),
-- }
--
