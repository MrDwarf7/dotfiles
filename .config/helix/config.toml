# use the tag of: 
## EVIL?
# to find the settings I've turned off/commented out since editing the evil build

### CHECK IMPL

# testing
################  HELIX CONFIG ###############
# theme = "molokai"
theme = "1_tokyonight_storm"


##############################################
########### Generic editor section ###########
##############################################

[editor]
evil = true
line-number = "relative"
scrolloff = 6
# shell = ""
cursorline = true
bufferline = "always"      # Options include always, never, multiple (Where more than one is present)
completion-trigger-len = 1
auto-info = true
rulers = [90, 120]
color-modes = true
popup-border = "all"

shell = ["pwsh.exe", "-Command"]

# some function(with, params, here)

# auto-completion = true
# path-completion = true

idle-timeout = 160
completion-timeout = 10
default-line-ending = "lf"

end-of-line-diagnostics = "warning"


[editor.gutters]
layout = ["spacer", "diagnostics", "line-numbers", "spacer", "diff"]

[editor.gutters.line-numbers]
min-width = 3

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "block"


[editor.statusline]
left = ["mode", "file-name", "file-modification-indicator"]
# center = [""]
right = [
  "diagnostics",
  "primary-selection-length",
  "position",
  "total-line-numbers",
  "spacer",
  "position-percentage",
  "spacer",
  "spinner",
  "spacer",
]

separator = "|"
mode.normal = "NORMAL"
mode.insert = "INSERT"
mode.select = "SELECT"


[editor.file-picker]
max-depth = 4
hidden = false
follow-symlinks = true
git-ignore = true
git-global = true
ignore = true

[editor.indent-guides]
render = true
character = "▏"
skip-levels = 0

[editor.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
"'" = "'"
'`' = '`'
# '<' = '>'

[editor.lsp]
display-messages = false
auto-signature-help = true
display-inlay-hints = true
display-signature-help-docs = true
snippets = true
goto-reference-include-declaration = true

[editor.inline-diagnostics]
cursor-line = "error"
other-lines = "warning"
prefix-len = 4

[editor.whitespace.render]
tab = "all"
space = "all"
nbsp = "all"


[editor.whitespace.characters]
space = "·"
nbsp = "⍽"
nnbsp = "␣"
tab = "→"

##############################################
######### END Generic editor section #########  
##############################################


##############################################
########### Leader Key assignments ###########
##############################################

[keys.normal.space]
x = ":buffer-close"

"n" = "goto_next_buffer"
"p" = "goto_previous_buffer"

F = "no_op"

k = "no_op"
a = "no_op"
b = "no_op"
# w = "window_mode"

# [keys.normal.window]
# C-h = "swap_view_left"
# C-j = "swap_view_down"
# C-k = "swap_view_up"
# C-l = "swap_view_right"

j = "no_op"
h = "no_op"
s = "no_op"
S = "no_op"
y = "no_op"
Y = "no_op"
d = "no_op"
D = "no_op"
P = "no_op"
r = "no_op"
R = "no_op"

[keys.normal.space.f] # Find 
f = "file_picker_in_current_directory"
F = "file_picker"
b = "buffer_picker"
p = "workspace_diagnostics_picker"
P = "diagnostics_picker"
l = "last_picker"
j = "jumplist_picker"
w = "global_search"

# Toggles
[keys.normal.space.t]
i = ":toggle-option lsp.display-inlay-hints"


[keys.normal.space.l] # LSP
f = ":format"
a = "code_action"

r = "select_references_to_symbol_under_cursor"
R = "rename_symbol"
s = "symbol_picker"
S = "workspace_symbol_picker"

d = "workspace_diagnostics_picker"
D = "diagnostics_picker"

h = ":tree-sitter-subtree"
t = ":tree-sitter-highlight-name"


[keys.normal.space.w] # Window
left = "no_op"
right = "no_op"
up = "no_op"
down = "no_op"

# C-h = "no_op"
# C-j = "no_op"
# C-k = "no_op"
# C-l = "no_op"

H = "no_op"
L = "no_op"
J = "no_op"
K = "no_op"


[keys.normal.space.w.w] # Window

h = "swap_view_left"
j = "swap_view_down"
k = "swap_view_up"
l = "swap_view_right"


[keys.normal.space."="]
"=" = ":format"


# [keys.normal.space.d] # Debug
# c = ":debug-start"
# h = ":debug-eval"
# R = "dap_restart"

# [keys.popup]

# [keys.normal]
# d = [
# "goto_next_diag",
# "collapse_selection",
# ]


##############################################
######### END Leader Key assignments #########
##############################################


[keys.normal]
# # Quick iteration on config changes
# C-9 = ":config-open"
'\' = ":config-reload"
K = "hover"
# C-s = ":w"              # Saving with Ctrl+s
C-g = ":show-directory"

C-u = ["half_page_up"]
C-d = ["half_page_down"]

C-e = ["scroll_down"]
C-y = ["scroll_up"]

# # Some nice Helix stuff
# C-h = "select_prev_sibling"
# C-j = "shrink_selection"
# C-k = "expand_selection"
# C-l = "select_next_sibling"
#
# # Personal preference
o = ["open_below", "insert_mode"]
O = ["open_above", "insert_mode"]
#
#
# # Muscle memory
# ## EVIL?
#
"{" = ["goto_prev_paragraph", "collapse_selection"]
"}" = ["goto_next_paragraph", "collapse_selection"]
0 = "goto_line_start"
"$" = "goto_line_end"
"L" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
"H" = "goto_first_nonwhitespace"
"G" = "goto_file_end"
"%" = "match_brackets"
V = [
  "select_mode",
  "extend_to_line_bounds",
  "goto_line_end",
] # addition of "goto_line_end" to assist with multi-line c (change)


";" = [ "repeat_last_motion", "collapse_selection" ]

# ## Overrides the awkward cursor creation thing CHECK
# C = [
#   "extend_to_line_end",
#   "yank_main_selection_to_clipboard",
#   "delete_selection",
#   "insert_mode",
# ]

D = [ "extend_to_line_end_newline", "evil_delete_immediate" ]

# S = "surround_add" # Would be nice to be able to do something after this but it isn't chainable

# w = ["evil_next_word_start", "move_char_right", "collapse_selection"]
# W = ["evil_next_long_word_start", "move_char_right", "collapse_selection"]

# e = ["evil_next_word_end", "collapse_selection"]
# E = ["evil_next_long_word_end", "collapse_selection"]

# b = ["evil_prev_word_start", "collapse_selection"]
# B = ["evil_prev_long_word_start", "collapse_selection"]

w = ["evil_next_word_start", "collapse_selection"]
W = ["evil_next_long_word_start", "collapse_selection"]

e = ["evil_next_word_end", "collapse_selection"]
E = ["evil_next_long_word_end", "collapse_selection"]

b = ["evil_prev_word_start", "collapse_selection"]
B = ["evil_prev_long_word_start", "collapse_selection"]


# # If you want to keep the selection-while-moving behaviour of Helix, this two lines will help a lot,
# # especially if you find having text remain selected while you have switched to insert or append mode
# #
# # There is no real difference if you have overridden the commands bound to 'w', 'e' and 'b' like above
# # But if you really want to get familiar with the Helix way of selecting-while-moving, comment the
# # bindings for 'w', 'e', and 'b' out and leave the bindings for 'i' and 'a' active below. A world of difference!
# i = ["insert_mode", "collapse_selection"]
# a = ["append_mode", "collapse_selection"]
#
# # Undoing the 'd' + motion commands restores the selection which is annoying
u = ["undo", "collapse_selection"]
C-r = ["redo", "collapse_selection"]
#
# # Escape the madness! No more fighting with the cursor! Or with multiple cursors!
# esc = ["collapse_selection", "keep_primary_selection"]
#
# # Search for word under cursor
"*" = [
  "move_char_right",
  "move_prev_word_start",
  "move_next_word_end",
  "search_selection",
  "search_next",
]
"#" = [
  "move_char_right",
  "move_prev_word_start",
  "move_next_word_end",
  "search_selection",
  "search_prev",
]
#
# # Make j and k behave as they do Vim when soft-wrap is enabled
j = "move_line_down"
k = "move_line_up"
#
# # 'Change' keybinding basically
 # c = ["delete_selection", "insert_mode"]


[keys.normal.s]
d = "surround_delete"


# # Extend and select commands that expect-a-manual input can't be chained
# # I've kept d[X] commands here because it's better to at least have the stuff you want to delete
# # selected so that it's just a keystroke away to delete
[keys.normal.d]
## EVIL?
d = [ 
    "extend_to_line_bounds",
    "yank_to_clipboard",
    "extend_to_line_bounds",
    "delete_selection",
]

# "L" = [
#     "extend_to_line_end",
#     "yank_to_clipboard",
#     "delete_selection",
# ]
# "H" = [
#     "goto_first_nonwhitespace",
#     "yank_to_clipboard",
#     "delete_selection",
# ]
#
#
# "$" = [
#     "extend_to_line_end",
#     "yank_to_clipboard",
#     "delete_selection",
# ]
# "^" = [
#     "goto_first_nonwhitespace",
#     "yank_to_clipboard",
#     "delete_selection",
# ]

# t = [
#     "select_mode",
#     "find_till_char",
#     "evil_delete_immediate",
#     "normal_mode",
# ]
# s = ["surround_delete"]
#
# ### CHECK IMPL
# i = ["select_textobject_inner"]
# a = ["select_textobject_around"]

j = [ 
  "select_line_below",
  "evil_delete_immediate",
  "extend_to_line_bounds",
  "evil_delete_immediate"
]

down = [
  "select_line_below",
  "evil_delete_immediate",
  "extend_to_line_bounds",
  "evil_delete_immediate"
]

k = [
  "extend_to_line_bounds",
  "evil_delete_immediate",
  "select_line_above",
  "evil_delete_immediate"
]
up = [
  "extend_to_line_bounds",
  "evil_delete_immediate",
  "select_line_above",
  "evil_delete_immediate"
]

G = [
    "extend_to_line_bounds",
    "goto_last_line",
    "extend_to_line_bounds",
    "yank_main_selection_to_clipboard",
    "evil_delete_immediate"
]


[keys.normal.g]
c = { c = "toggle_comments" }
g = "goto_file_start"


[keys.normal.c]
# # i = ["select_textobject_inner"]
# # a = [ ["select_textobject_around"] "yank_main_selection_to_clipboard", "delete_selection", "insert_mode" ]
# # a = {w = ["select_textobject_around", "yank_main_selection_to_clipboard", "delete_selection", "insert_mode"] }
#
# i = ["select_textobject_inner"]
# a = ["select_textobject_around"]
# r = ["surround_replace"]
#
# ## EVIL?
#
# t = "evil_find_till_char"
# T = "evil_till_prev_char"
# f = "evil_find_next_char"
# F = "evil_find_prev_char"
#
# # t = ["extend_till_char", "yank_main_selection_to_clipboard", "delete_selection"]
# # T = [
# #   "extend_till_prev_char",
# #   "yank_main_selection_to_clipboard",
# #   "delete_selection",
# # ]
#
# # f = [
# #   "find_next_char",
# #   "yank_main_selection_to_clipboard",
# #   "delete_selection",
# #   "insert_mode",
# # ]
#
# # F = [
# #   "find_prev_char",
# #   "yank_main_selection_to_clipboard",
# #   "delete_selection",
# #   "insert_mode",
# # ]
#
#
# ## EVIL?
# w = "evil_next_word_start"
# W = "evil_next_long_word_start"
# e = "evil_next_word_end"
# E = "evil_next_long_word_end"
# b = "evil_prev_word_start"
# B = "evil_prev_long_word_start"
#
#
# # w = [
# #   "move_next_word_start",
# #   "yank_main_selection_to_clipboard",
# #   "delete_selection",
# #   "insert_mode",
# # ]
# # W = [
# #   "move_next_long_word_start",
# #   "yank_main_selection_to_clipboard",
# #   "delete_selection",
# #   "insert_mode",
# # ]
# # e = [
# #   "move_next_word_end",
# #   "yank_main_selection_to_clipboard",
# #   "delete_selection",
# #   "insert_mode",
# # ]
# # E = [
# #   "move_next_long_word_end",
# #   "yank_main_selection_to_clipboard",
# #   "delete_selection",
# #   "insert_mode",
# # ]
# # b = [
# #   "move_prev_word_start",
# #   "yank_main_selection_to_clipboard",
# #   "delete_selection",
# #   "insert_mode",
# # ]
# # B = [
# #   "move_prev_long_word_start",
# #   "yank_main_selection_to_clipboard",
# #   "delete_selection",
# #   "insert_mode",
# # ]
#
#
# [keys.insert]
# # Escape the madness! No more fighting the cursor! Or with multiple cursors!
# esc = ["collapse_selection", "normal_mode"]
#
# # quick test to see if the backspace is working
#
#
# # chunking backspaces
C-backspace = [
  "insert_mode",
  "move_char_right",
  "select_mode",
  "move_prev_word_start",
  "delete_selection",
  "normal_mode",
  "insert_mode",
]
# # move_prev_long_word_start
#
# # handles jj and jk
[keys.insert.j]
j = ["normal_mode", "move_char_left"]
k = ["normal_mode", "move_char_left"]
# handles kk and kj
[keys.insert.k]
j = ["normal_mode", "move_char_left"]
k = ["normal_mode", "move_char_left"]
#
#
[keys.select]
# # Muscle memory
"{" = ["extend_to_line_bounds", "goto_prev_paragraph"]
"}" = ["extend_to_line_bounds", "goto_next_paragraph"]
0 = "goto_line_start"
"$" = "goto_line_end"
"L" = "goto_line_end"

"^" = "goto_first_nonwhitespace"
"H" = "goto_first_nonwhitespace"
G = "goto_file_end"

# D = "evil_delete"
#
# # D = ["extend_to_line_bounds", "delete_selection", "normal_mode"]
# C = ["goto_line_start", "extend_to_line_bounds", "change_selection"]
# "%" = "match_brackets"
# S = "surround_add"                                                   # Basically 99% of what I use vim-surround for
# u = ["switch_to_lowercase", "collapse_selection", "normal_mode"]
# U = ["switch_to_uppercase", "collapse_selection", "normal_mode"]
#
# # Visual-mode specific muscle memory
# i = "select_textobject_inner"
# a = "select_textobject_around"
#
# # Some extra binds to allow us to insert/append in select mode because it's nice with multiple cursors
# tab = [
#   "insert_mode",
#   "collapse_selection",
# ] # tab is read by most terminal editors as "C-i"
# C-a = ["append_mode", "collapse_selection"]
#
# # Make selecting lines in visual mode behave sensibly
# k = ["extend_line_up", "extend_to_line_bounds"]
# j = ["extend_line_down", "extend_to_line_bounds"]
k = "extend_line_up"
j = "extend_line_down"
#
# # Clipboards over registers ye ye
# d = ["yank_main_selection_to_clipboard", "delete_selection", "normal_mode"]
# x = ["yank_main_selection_to_clipboard", "delete_selection"]
# y = [
#   "yank_main_selection_to_clipboard",
#   "normal_mode",
#   "flip_selections",
#   "collapse_selection",
# ]
# Y = [
#   "extend_to_line_bounds",
#   "yank_main_selection_to_clipboard",
#   "goto_line_start",
#   "collapse_selection",
#   "normal_mode",
# ]
p = "replace_with_yanked"
# P = "paste_clipboard_before"
#
# # Change mode - Visual
# c = ["delete_selection", "insert_mode"]
# # Trying to get this working as intended for selecting words (Via v-e, or v-a-w equivilents)
# # w = ["move_next_word_end", "keep_primary_selection"]
# # W = ["move_next_long_word_end", "keep_primary_selection"]
# # e = ["collapse_selection"]
# # E = ["collapse_selection"]
#
# # Escape the madness! No more fighting with the cursor! Or with multiple cursors!
# esc = ["collapse_selection", "keep_primary_selection", "normal_mode"]
#
[keys.select.g]
c = "toggle_comments"
