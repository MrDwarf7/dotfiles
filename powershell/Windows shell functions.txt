#
#Update OhMyPosh using this command - 
#winget upgrade JanDeDobbeleer.OhMyPosh -s winget
#Reqs/commands
#	PowerShellGet v1.6.0 or higher - can run "Get-Module" without quotes to check
#	IF lower, run - Install-Module -Name PowerShellGet -Force
#
#PSReadLine
#	Install-Module PSReadLine
#
#(Optional - but recommended) Consider installing CompletionPredictor alongside PSReadLine also
#	Install-Module -Name CompletionPredictor -Repository PSGallery
#
#
#Importing: PSReadLine
#	Import-Module PSReadLine
#
#	Or add it to the top of your $PROFILE, 
#	the default location for this is: 
#
#	%%%Documents\PowerShell\Microsoft.PowerShell_profile.ps1
#
# 	If you don't have one this file already, you may need to create one.
#	This can be done with the following command: 
#	New-Item -Path $profile -Type File -Force
#
#	Add it by opening the file or by running "notepad $PROFILE" (or some text editor/tool to open the $PROFILE [ise $PROFILE, code $PROFILE, etc.]
#
#Importing: CompletionPredictor 
#	Import-Module -Name CompletionPredictor
#	Importing this can also be done the same as above, by adding to $PROFILE.
#
#
#(Optional) Consider moving/redirecting your profile loading to somewhere on local storage for loading speeds
#if currently loading from One - Drive or another online source.
#	If at ANY STAGE after redirecting your $PROFILE call you happen to run:
#	notepad $PROFILE
#
#	You will be opening the END-POINT file, not the re-direct, be aware of this and decide if you wish to move ALL your code to the new file (Recommended)
#
#	To do this, open the base version of $PROFILE from the above step, and use the following command to move the $PROFILE it's loading to location of your choice.
#	(Be aware of the tabs, they aren't required in the actual file, just here for readability. Though they make no difference in the function of running in $PROFILE instance.)
#
#	$profile = "C:\Location\Of\Your\Choosing\ProfileHoldingFolder\Microsoft.PowerShell_profile.ps1"
#	. $profile
#
#
#Oh-My-Posh for prompt styling control etc.
#	https://ohmyposh.dev/
#
#
#For any of the PSReadLine commands that you may find online for custimization from other Uers, ensure you add this to the VERY top of your $PROFILE
#
#Importing deps
# using namespace System.Management.Automation
# using namespace System.Management.Automation.Language
#
#	These are similar to import statements within Python or JavaScript and allow ease of use on longer commands.
#
#
#Oh-My-Posh Config call
# oh-my-posh init pwsh --config $env:LOCALAPPDATA\Programs\oh-my-posh\themes\1Custom_Work_powerlevel10k_rainbow.omp.json| Invoke-Expression
#
#
#PSReadLine (Imports)
# Import-Module PSReadLine
# Import-Module -Name CompletionPredictor

#PSReadLine Options set
# Set-PSReadlineOption -PredictionSource HistoryAndPlugin -PredictionViewStyle ListView -HistorySearchCursorMovesToEnd
# Set-PSReadLineOption -PredictionViewStyle ListView
#
#Misc available options: 
#-CompletionQueryItems
#

### START MAIN SCRIPT


# General Configuration
using namespace System.Management.Automation
using namespace System.Management.Automation.Language

#Oh-My-Posh Config call
oh-my-posh init pwsh --config $env:LOCALAPPDATA\Programs\oh-my-posh\themes\1Custom_Work_powerlevel10k_rainbow.omp.json | Invoke-Expression

Import-Module PSReadLine
Import-Module -Name CompletionPredictor
#PSReadLine Options set
Set-PSReadlineOption -PredictionSource HistoryAndPlugin -PredictionViewStyle ListView -HistorySearchCursorMovesToEnd

# Auto completion via winget Tabs
Register-ArgumentCompleter -Native -CommandName winget -ScriptBlock {
    param($wordToComplete, $commandAst, $cursorPosition)
    [Console]::InputEncoding = [Console]::OutputEncoding = $OutputEncoding = [System.Text.Utf8Encoding]::new()
    $Local:word = $wordToComplete.Replace('"', '""')
    $Local:ast = $commandAst.ToString().Replace('"', '""')
    winget complete --word="$Local:word" --commandline "$Local:ast" --position $cursorPosition | ForEach-Object {
        [System.Management.Automation.CompletionResult]::new($_, $_, 'ParameterValue', $_)
    }
}

# Import the Chocolatey Profile that contains the necessary code to enable
# tab-completions to function for `choco`.
# Be aware that if you are missing these lines from your profile, tab completion
# for `choco` will not function.
# See https://ch0.co/tab-completion for details.
$ChocolateyProfile = "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
if (Test-Path($ChocolateyProfile))
{
    Import-Module "$ChocolateyProfile"
}

# BEGIN - Alias(s)
#
#Git aliases from Oh-my-zsh Git plugin for PWSH
Import-Module git-aliases -DisableNameChecking

New-Alias grep Select-String
New-Alias which Get-Command
New-Alias ln New-SymLink

# END - Alias(s)


# BEGIN - Tooling Functions
function Test-CommandExists ([Parameter(Mandatory = $true)][string] $Command)
{
    return [bool](Get-Command $Command -ErrorAction SilentlyContinue)
}

# Work.sort of
function checkEnvironment
{
    if ($env:COMPUTERNAME -clike "*LG*")
    {
        return $true
    } else
    {
        return $false
    }
}

# END - Tooling Functions

#PSReadLine functions start.
# Searching for commands with up/down arrow is really handy.  The
# option "moves to end" is useful if you want the cursor at the end
# of the line while cycling through history like it does w/o searching,
# without that option, the cursor will remain at the position it was
# when you used up arrow, which can be useful if you forget the exact
# string you started the search on.

# Set-PSReadLineOption -HistorySearchCursorMovesToEnd
Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward

# This key handler shows the entire or filtered history using Out-GridView. The
# typed text is used as the substring pattern for filtering. A selected command
# is inserted to the command line without invoking. Multiple command selection
# is supported, e.g. selected by Ctrl + Click.
Set-PSReadLineKeyHandler -Key F7 `
    -BriefDescription History `
    -LongDescription 'Show command history' `
    -ScriptBlock {
    $pattern = $null
    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$pattern, [ref]$null)
    if ($pattern)
    {
        $pattern = [regex]::Escape($pattern)
    }

    $history = [System.Collections.ArrayList]@(
        $last = ''
        $lines = ''
        foreach ($line in [System.IO.File]::ReadLines((Get-PSReadLineOption).HistorySavePath))
        {
            if ($line.EndsWith('`'))
            {
                $line = $line.Substring(0, $line.Length - 1)
                $lines = if ($lines)
                {
                    "$lines`n$line"
                } else
                {
                    $line
                }
                continue
            }

            if ($lines)
            {
                $line = "$lines`n$line"
                $lines = ''
            }

            if (($line -cne $last) -and (!$pattern -or ($line -match $pattern)))
            {
                $last = $line
                $line
            }
        }
    )
    $history.Reverse()

    $command = $history | Out-GridView -Title History -PassThru
    if ($command)
    {
        [Microsoft.PowerShell.PSConsoleReadLine]::RevertLine()
        [Microsoft.PowerShell.PSConsoleReadLine]::Insert(($command -join "`n"))
    }
}


#Quotation mark control
Set-PSReadLineKeyHandler -Key '"', "'" `
    -BriefDescription SmartInsertQuote `
    -LongDescription "Insert paired quotes if not already on a quote" `
    -ScriptBlock {
    param($key, $arg)

    $quote = $key.KeyChar

    $selectionStart = $null
    $selectionLength = $null
    [Microsoft.PowerShell.PSConsoleReadLine]::GetSelectionState([ref]$selectionStart, [ref]$selectionLength)

    $line = $null
    $cursor = $null
    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$line, [ref]$cursor)

    # If text is selected, just quote it without any smarts
    if ($selectionStart -ne -1)
    {
        [Microsoft.PowerShell.PSConsoleReadLine]::Replace($selectionStart, $selectionLength, $quote + $line.SubString($selectionStart, $selectionLength) + $quote)
        [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($selectionStart + $selectionLength + 2)
        return
    }

    $ast = $null
    $tokens = $null
    $parseErrors = $null
    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$ast, [ref]$tokens, [ref]$parseErrors, [ref]$null)

    function FindToken
    {
        param($tokens, $cursor)

        foreach ($token in $tokens)
        {
            if ($cursor -lt $token.Extent.StartOffset)
            { continue 
            }
            if ($cursor -lt $token.Extent.EndOffset)
            {
                $result = $token
                $token = $token -as [StringExpandableToken]
                if ($token)
                {
                    $nested = FindToken $token.NestedTokens $cursor
                    if ($nested)
                    { $result = $nested 
                    }
                }

                return $result
            }
        }
        return $null
    }

    $token = FindToken $tokens $cursor

    # If we're on or inside a **quoted** string token (so not generic), we need to be smarter
    if ($token -is [StringToken] -and $token.Kind -ne [TokenKind]::Generic)
    {
        # If we're at the start of the string, assume we're inserting a new string
        if ($token.Extent.StartOffset -eq $cursor)
        {
            [Microsoft.PowerShell.PSConsoleReadLine]::Insert("$quote$quote ")
            [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($cursor + 1)
            return
        }

        # If we're at the end of the string, move over the closing quote if present.
        if ($token.Extent.EndOffset -eq ($cursor + 1) -and $line[$cursor] -eq $quote)
        {
            [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($cursor + 1)
            return
        }
    }

    if ($null -eq $token -or
        $token.Kind -eq [TokenKind]::RParen -or $token.Kind -eq [TokenKind]::RCurly -or $token.Kind -eq [TokenKind]::RBracket)
    {
        if ($line[0..$cursor].Where{ $_ -eq $quote }.Count % 2 -eq 1)
        {
            # Odd number of quotes before the cursor, insert a single quote
            [Microsoft.PowerShell.PSConsoleReadLine]::Insert($quote)
        } else
        {
            # Insert matching quotes, move cursor to be in between the quotes
            [Microsoft.PowerShell.PSConsoleReadLine]::Insert("$quote$quote")
            [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($cursor + 1)
        }
        return
    }

    # If cursor is at the start of a token, enclose it in quotes.
    if ($token.Extent.StartOffset -eq $cursor)
    {
        if ($token.Kind -eq [TokenKind]::Generic -or $token.Kind -eq [TokenKind]::Identifier -or 
            $token.Kind -eq [TokenKind]::Variable -or $token.TokenFlags.hasFlag([TokenFlags]::Keyword))
        {
            $end = $token.Extent.EndOffset
            $len = $end - $cursor
            [Microsoft.PowerShell.PSConsoleReadLine]::Replace($cursor, $len, $quote + $line.SubString($cursor, $len) + $quote)
            [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($end + 2)
            return
        }
    }

    # We failed to be smart, so just insert a single quote
    [Microsoft.PowerShell.PSConsoleReadLine]::Insert($quote)
}
#END Quotation mark control



#Bracket control - Opening
Set-PSReadLineKeyHandler -Key '(', '{', '[' `
    -BriefDescription InsertPairedBraces `
    -LongDescription "Insert matching braces" `
    -ScriptBlock {
    param($key, $arg)

    $closeChar = switch ($key.KeyChar)
    {
        <#case#> '('
        { [char]')'; break 
        }
        <#case#> '{'
        { [char]'}'; break 
        }
        <#case#> '['
        { [char]']'; break 
        }
    }

    $selectionStart = $null
    $selectionLength = $null
    [Microsoft.PowerShell.PSConsoleReadLine]::GetSelectionState([ref]$selectionStart, [ref]$selectionLength)

    $line = $null
    $cursor = $null
    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$line, [ref]$cursor)
    
    if ($selectionStart -ne -1)
    {
        # Text is selected, wrap it in brackets
        [Microsoft.PowerShell.PSConsoleReadLine]::Replace($selectionStart, $selectionLength, $key.KeyChar + $line.SubString($selectionStart, $selectionLength) + $closeChar)
        [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($selectionStart + $selectionLength + 2)
    } else
    {
        # No text is selected, insert a pair
        [Microsoft.PowerShell.PSConsoleReadLine]::Insert("$($key.KeyChar)$closeChar")
        [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($cursor + 1)
    }
}
#END Bracket control - Opening

#Bracket control - Closing
Set-PSReadLineKeyHandler -Key ')', ']', '}' `
    -BriefDescription SmartCloseBraces `
    -LongDescription "Insert closing brace or skip" `
    -ScriptBlock {
    param($key, $arg)

    $line = $null
    $cursor = $null
    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$line, [ref]$cursor)

    if ($line[$cursor] -eq $key.KeyChar)
    {
        [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($cursor + 1)
    } else
    {
        [Microsoft.PowerShell.PSConsoleReadLine]::Insert("$($key.KeyChar)")
    }
}

Set-PSReadLineKeyHandler -Key Backspace `
    -BriefDescription SmartBackspace `
    -LongDescription "Delete previous character or matching quotes/parens/braces" `
    -ScriptBlock {
    param($key, $arg)

    $line = $null
    $cursor = $null
    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$line, [ref]$cursor)

    if ($cursor -gt 0)
    {
        $toMatch = $null
        if ($cursor -lt $line.Length)
        {
            switch ($line[$cursor])
            {
                <#case#> '"'
                { $toMatch = '"'; break 
                }
                <#case#> "'"
                { $toMatch = "'"; break 
                }
                <#case#> ')'
                { $toMatch = '('; break 
                }
                <#case#> ']'
                { $toMatch = '['; break 
                }
                <#case#> '}'
                { $toMatch = '{'; break 
                }
            }
        }

        if ($toMatch -ne $null -and $line[$cursor - 1] -eq $toMatch)
        {
            [Microsoft.PowerShell.PSConsoleReadLine]::Delete($cursor - 1, 2)
        } else
        {
            [Microsoft.PowerShell.PSConsoleReadLine]::BackwardDeleteChar($key, $arg)
        }
    }
}

#END Bracket control - Closing

#endregion Smart Insert/Delete


#Raw Functions

# BEGIN - Shell functions

# Work
function gitsh
{
    C:/Applications/Git/bin/bash.exe -i -l
}

# END - Shell functions

# BEGIN - Navigation functions
# Work
function mgr
{
    param(
        [string]$path = "C:\Applications\GitHub_Projects"
    )
    Push-Location $path
    Get-ChildItem
}

# Work
function wgr
{
    param(
        [string]$path = "C:\Applications\GitWork_Projects"
    )
    Push-Location $path
    Get-ChildItem
}

# Work
function bpgr
{
    param(
        [string]$path = "\\SomeNetWorkPathPlace\SomeOtherFolderPlace"
    )
    Push-Location $path
    Get-ChildItem
}

# Work
function bpr
{
    param(
        [string]$path = "\\SomeNetWorkPathPlace\SomeFolder\SomeOtherFolder"
    )
    Push-Location $path
}


# Work
function sar
{
    param(
        [string]$path = "\\SomeNetWorkPathPlace\SomeFolder\SomeOtherFolder"
    )
    Push-Location $path
}


# Work
function ohome
{
	$onlineHome = "$env:USERPROFILE\OneDrive - SomeName"
    Push-Location $onlineHome
    Get-ChildItem
}
# END - Navigation functions


# BEGIN - Python Functions
function pip
{
        
    if (checkEnvironment -eq $true)
    {
        if ($env:VIRTUAL_ENV)
        {
            $virtualEnvPipPath = Join-Path $env:VIRTUAL_ENV "Scripts\pip.exe"
            Set-Alias -Name pip -Value $virtualEnvPipPath
            & Set-Alias -Name pip3 -Value $virtualEnvPipPath
                
            & pip $args
        } else
        {
            $pipPath = "C:\Applications\Python3.11.4\Scripts\pip.exe"
            & Set-Alias -Name pip -Value $pipPath
                
            & pip $args
        }
    } else
    {
        continue
    }
}

# Work
function pmv
{
    try
    {
        if (checkEnvironment)
        {
            py -m venv .venv
            Push-Location .\.venv\Scripts
            .\activate
            Pop-Location
            Get-ChildItem
        } catch {
            python -m venv .venv
            Push-Location .\.venv\Scripts
            .\activate
            Pop-Location
            Get-ChildItem

        }
    }

    catch
    {
    }
}

# Work
function dea
{
    deactivate
}

# Work
function avenv
{
    Push-Location .\.venv\Scripts
    .\activate
    Pop-Location
    Get-ChildItem
}

# Work
function rmvenv
{
    if ($env:VIRTUAL_ENV) {
        deactivate
        } else {
            try
            {
                if (checkEnvironment)
                {
                    Remove-Item -r ./.venv
                } else
                {
                    Remove-Item -Path ./.venv -Recurse -Force
                }
            } catch
            {
                Write-Error "Failed to remove virtual environment"
            }
        }
    }


# END - Python Functions

#Linux Functions

function pro
{
    . $PROFILE
}

function cd2
{
    Set-Location ../../
}

function .
{
    Start-Process .
}

function touch
{
    param($arg)
    New-Item $arg
}

function la
{
    param ($path = ".")
    Get-ChildItem $path -Force
}


function zip
{
    param (
        [string]$ItemToCompress,
        [string]$OptionalDestination
    )
    $ItemName = (Get-Item $ItemToCompress).Name
    $ParentFolder = (Split-Path -Path $ItemToCompress -Parent)
  
    if ([String]::IsNullOrEmpty($OptionalDestination))
    {
        $DefaultLocation = Join-Path -Path $ParentFolder -ChildPath $ItemName
  
        Compress-Archive -Path $ItemToCompress -DestinationPath "$DefaultLocation.zip"
    } else
    {
        Compress-Archive -Path $ItemToCompress -DestinationPath "$OptionalDestination\$ItemName.zip"
    }
}
  
  
function uzip
{
    param (
        [string]$ItemToUnzip,
        [string]$OptionalDestination
    )
    $ItemName = (Get-Item $ItemToUnzip).Name 
    $ParentFolder = (Split-Path -Path $ItemToUnzip -Parent)
  
    if ([String]::IsNullOrEmpty($OptionalDestination))
    {
        $DefaultLocation = Join-Path -Path $ParentFolder -ChildPath $ItemName
  
        Expand-Archive -Path $ItemToUnzip -DestinationPath "$DefaultLocation\$ItemName"
    } else
    {
        Expand-Archive -Path $ItemToUnzip -DestinationPath "$OptionalDestination\"
    }
}

# END - Linux Functions



# BEGIN - Vim things

function vim
{
    & nvim $args
}


function nvi
{
    $env:NVIM_APPNAME = "LazyVim"
    try
    {
        if (Test-CommandExists nvim)
        {
            & nvim $args
        } else
        {
            Write-Host "'nvim' command not recognized"
            return
        }
    } catch
    {
        return
    }
}

# WORK - Until better way of doing the check
function nvims
{
    $items =  "LazyVim","Default"
    $config = $items | fzf --prompt=" Neovim Config  " --height=~50% --layout=reverse --border --exit-0
  
    if ([string]::IsNullOrEmpty($config))
    {
        Write-Output "Nothing selected"
        return
    }
  
    if ($config -eq "Default")
    {
        $config = ""
    }

    $env:NVIM_APPNAME = $config
    try
    {
        if (Test-CommandExists nvim)
        {
            & nvim $args
        } else
        {
            Write-Host "'nvim' command not recognized"
            return
        }
    } catch
    {
        return
    }
}

# END - Vim things

# Original one here that includes neovide -- not my home config though
# function nvims
# {
#   $items =  "LazyVim","Default"
#   $config = $items | fzf --prompt=" Neovim Config  " --height=~50% --layout=reverse --border --exit-0
#
#   if ([string]::IsNullOrEmpty($config))
#   {
#     Write-Output "Nothing selected"
#     return
#   }
#
#   if ($config -eq "Default")
#   {
#     $config = ""
#   }
#
#   $env:NVIM_APPNAME = $config
#   try
#   {
#     if (Test-CommandExists neovide)
#     {
#       & neovide $args
#     } else
#     {
#       & nvim $args 
#     }
#   } catch
#   {
#
#   }
# }
